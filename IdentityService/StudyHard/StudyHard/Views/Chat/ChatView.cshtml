@using System.Globalization
@model ChatViewModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Messages";
}

<style>
    .container{max-width:1170px; margin:auto;}
    img{ max-width:100%;}
    .inbox_people {
      background: #f8f8f8 none repeat scroll 0 0;
      float: left;
      overflow: hidden;
      width: 40%; border-right:1px solid #c4c4c4;
    }
    .inbox_msg {
      border: 1px solid #c4c4c4;
      clear: both;
      overflow: hidden;
    }
    .top_spac{ margin: 20px 0 0;}
    
    
    .recent_heading {float: left; width:40%;}
    .srch_bar {
      display: inline-block;
      text-align: right;
      width: 60%;
    }
    .headind_srch{ padding:10px 29px 10px 20px; overflow:hidden; border-bottom:1px solid #c4c4c4;}
    
    .recent_heading h4 {
      color: #05728f;
      font-size: 21px;
      margin: auto;
    }
    .srch_bar input{ border:1px solid #cdcdcd; border-width:0 0 1px 0; width:80%; padding:2px 0 4px 6px; background:none;}
    .srch_bar .input-group-addon button {
      background: rgba(0, 0, 0, 0) none repeat scroll 0 0;
      border: medium none;
      padding: 0;
      color: #707070;
      font-size: 18px;
    }
    .srch_bar .input-group-addon { margin: 0 0 0 -27px;}
    
    .chat_ib h5{ font-size:15px; color:#464646; margin:0 0 8px 0;}
    .chat_ib h5 span{ font-size:13px; float:right;}
    .chat_ib p{ font-size:14px; color:#989898; margin:auto}
    .chat_img {
      float: left;
      width: 11%;
    }
    .chat_ib {
      float: left;
      padding: 0 0 0 15px;
      width: 88%;
    }
    
    .chat_people{ overflow:hidden; clear:both;}
    .chat_list {
      border-bottom: 1px solid #c4c4c4;
      margin: 0;
      padding: 18px 16px 10px;
    }
    
    .chat_list:hover {
      background:#c4c4c4;
    }
    .inbox_chat { height: 550px; overflow-y: scroll;}
    
    .active_chat{ background:#ebebeb;}
    
    .incoming_msg_img {
      display: inline-block;
      width: 6%;
    }
    .received_msg {
      display: inline-block;
      padding: 0 0 0 10px;
      vertical-align: top;
      width: 92%;
     }
     .received_withd_msg p {
      background: #ebebeb none repeat scroll 0 0;
      border-radius: 3px;
      color: #646464;
      font-size: 14px;
      margin: 0;
      padding: 5px 10px 5px 12px;
      width: 100%;
    }
    .time_date {
      color: #747474;
      display: block;
      font-size: 12px;
      margin: 8px 0 0;
    }
    .received_withd_msg { width: 57%;}
    .mesgs {
      float: left;
      padding: 30px 15px 0 25px;
      width: 60%;
    }
    
     .sent_msg p {
      background: #05728f none repeat scroll 0 0;
      border-radius: 3px;
      font-size: 14px;
      margin: 0; color:#fff;
      padding: 5px 10px 5px 12px;
      width:100%;
    }
    .outgoing_msg{ overflow:hidden; margin:26px 0 26px;}
    .sent_msg {
      float: right;
      width: 46%;
    }
    .input_msg_write textarea {
      background: rgba(0, 0, 0, 0) none repeat scroll 0 0;
      border: medium none;
      color: #4c4c4c;
      font-size: 15px;
      width: 100%;
      height: 100px;
      resize: none;
    }
    
    .type_msg {border-top: 1px solid #c4c4c4;position: relative;}
    .msg_send_btn {
      background: #05728f none repeat scroll 0 0;
      border: medium none;
      border-radius: 50%;
      color: #fff;
      cursor: pointer;
      font-size: 17px;
      height: 33px;
      position: absolute;
      right: 0;
      top: 11px;
      width: 33px;
    }
    .messaging { padding: 0 0 50px 0;}
    .msg_history {
      height: 450px;
      overflow: auto;
      /*display: flex;*/
      /*flex-direction: column-reverse;*/
    }
</style>

<link href="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
<script src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<!------ Include the above in your HEAD tag ---------->


<html>
<head>

    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css" type="text/css" rel="stylesheet"

</head>
<body>
<div class="container">
    <h3 class=" text-center">Messaging</h3>
    <div class="messaging">
        <div class="inbox_msg">
            <div class="inbox_people">
                <div class="headind_srch">
                    <div class="recent_heading">
                        <h4>Recent</h4>
                    </div>
                    <div class="srch_bar">
                        <div class="stylish-input-group">
                            <input type="text" class="search-bar" placeholder="Search">
                            <span class="input-group-addon">
                                <button type="button">
                                    <i class="fa fa-search" aria-hidden="true"></i>
                                </button>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="inbox_chat" id="inbox_chat">
                    @foreach (var chat in @Model.UserChats)
                    {
                        <div prop-chat-id="@chat.ChatId" prop-chat-collocutor-id="@chat.CollocutorId" prop-chat-collocutor-name="@chat.CollocutorName"
                             onclick="onChatSelected(this)">
                            <div class="chat_list @(chat.ChatId == Model.SelectedChatId ? "active_chat" : "")">
                                <div class="chat_people">
                                    <div class="chat_img">
                                        <img class="profile-image" src="@(chat.CollocutorPictureUrl)" />
                                    </div>
                                    <div class="chat_ib">
                                        <h5>
                                            @chat.CollocutorName <span class="chat_date">@chat.LastMessageTime.Date.ToString("yyyy-MM-dd")</span>
                                        </h5>
                                        <p>
                                            @chat.LastMessage
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="mesgs">
                <div class="msg_history" id="msg_history">
                </div>
                <div class="type_msg">
                    <div class="input_msg_write">
                        <textarea class="write_msg" id="write_msg_inp" placeholder="Type a message"></textarea>
                        <button class="msg_send_btn" type="button" onclick="onSendMessage()">
                            <i class="fa fa-paper-plane-o" aria-hidden="true"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>
</body>
</html>

@section Scripts {
    <script>
            let selectedChatId = @(Model.SelectedChatId);
            let userId = @(Model.UserId);

            function scrollToBottom() {
              let msgsDiv = document.getElementById('msg_history');
              msgsDiv.scrollTop = msgsDiv.scrollHeight;
            }

            $(document).ready(function() {
                loadMessagesForChat(selectedChatId, scrollToBottom);

                setInterval(function() {
                    loadMessagesForChat(selectedChatId);
                    updateChats();
                }, 2500);
            })

            function onChatSelected(e) {
                // Get selected chat id
                let newSelectedChatId = parseInt($(e).attr('prop-chat-id'));

                if (newSelectedChatId === selectedChatId)
                {
                    return;
                }
                selectedChatId = newSelectedChatId;

                clearMessageField();

                // Change active class
                $('.active_chat').removeClass('active_chat');
                $(e).children().addClass('active_chat');

                loadMessagesForChat(selectedChatId, scrollToBottom);
            }

            function appendMessage(message) {
                messageDate = new Date(message.sendTime);
                dateData = messageDate.toLocaleDateString('ua', { hour: 'numeric', minute: 'numeric' }).split(', ');

                if (message.senderId === userId) {
                    $('#msg_history').append(formOutcomingMessage(message.content, dateData[1], dateData[0]));
                } else {
                    $('#msg_history').append(formIncomingMessage(message.content, dateData[1], dateData[0], message.senderId));
                }
            }

            function refillMessages(messages)
            {
                $('#msg_history').empty();
                messages.forEach(appendMessage);
            }

            function loadMessagesForChat(chatId, action) {
                if (!action)
                {
                    action = function() {

                    }
                }

                if (selectedChatId === -1) {
                    return;
                }

                $.ajax({
                        type: 'GET',
                        url: "/api/chat/" + chatId + "/messages",
                        success: messages => {
                            refillMessages(messages);
                            action();
                        },
                        error: resp => {
                            console.log(resp);
                        }
                    }
                );
            }

            function onSendMessage() {
                let content = $('#write_msg_inp').val();

                if (!content.trim())
                {
                    return;
                }

                let requestData = {
                    content: content,
                    chatId: selectedChatId
                };

                $.ajax({
                        type: 'POST',
                        url: "/api/chat/" + selectedChatId + "/messages",
     					contentType: "application/json",
     					data: JSON.stringify(requestData),
                        success: message => {
                            clearMessageField();
                            appendMessage(message);
                            scrollToBottom();
                            updateCollocutors(message);
                        },
                        error: resp => {
                            console.log(resp);
                        }
                    }
                );
            }

            function clearMessageField() {
              $('#write_msg_inp').val('');
            }

            function updateChats() {
                $.ajax({
                        type: 'GET',
                        url: "/api/chat/chat-data",
                        success: chatData => {
                            updateChatData(chatData);
                        },
                        error: resp => {
                            console.log(resp);
                        }
                    }
                );
            }

            function formatMessageDate(date) {
                messageDate = new Date(date);
                return messageDate.toLocaleDateString('ua',  { hour: 'numeric', minute: 'numeric'}).split(', ');
            }

            function updateChatData(chatData) {
                $('#inbox_chat').empty();
                chatData.forEach(function(chatInfo) {
                    dateData = formatMessageDate(chatInfo.lastMessageTime);
                    $('#inbox_chat').append(formCollocutorData(chatInfo.chatId, chatInfo.collocutorId, chatInfo.collocutorName, chatInfo.lastMessage, dateData[0], chatInfo.collocutorPictureUrl));
                });
            }

            function updateCollocutors(message) {
                let collocutorElem = $('div[prop-chat-id="' + selectedChatId + '"]');
                let collocutorId = collocutorElem.attr('prop-chat-collocutor-id');
                let collocutorName = collocutorElem.attr('prop-chat-collocutor-name');
                
                let collocutorPictureUrl = collocutorElem.attr('prop-chat-collocutor-pictureUrl');
                let dateData = formatMessageDate(message.sendTime);
                let messageDate = new Date(message.sendTime);

                collocutorElem.remove();
                $('#inbox_chat').prepend(formCollocutorData(selectedChatId, collocutorId, collocutorName, message.content, dateData[0], collocutorPictureUrl));
            }

        function formCollocutorData(chatId, collocutorId, collocutorName, message, date, collocutorPictureUrl) {
              return `<div prop-chat-id="` + chatId + `" prop-chat-collocutor-id="` + collocutorId + `" prop-chat-collocutor-name="${collocutorName}"
                             onclick="onChatSelected(this)">
                            <div class="chat_list ${chatId === selectedChatId ? 'active_chat' : ''}">
                                <div class="chat_people">
                                    <div class="chat_img">
                                        <img class="profile-image" src="${collocutorPictureUrl}" />
                                    </div>
                                    <div class="chat_ib">
                                        <h5>
                                            ${collocutorName} <span class="chat_date">${date}</span>
                                        </h5>
                                        <p>
                                            ${message}
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>`
            }


        function formIncomingMessage(content, time, date, senderId) {
            let image = $(`div[prop-chat-collocutor-id="${senderId}"] img`).first().clone()[0].outerHTML;
              return `<div class="incoming_msg">
                                      <div class="incoming_msg_img">
                                          ${image}
                                      </div>
                                      <div class="received_msg">
                                          <div class="received_withd_msg">
                                              <p>
                                                  ${content}
                                              </p>
                                              <span class="time_date">${time + " | " + date}</span>
                                          </div>
                                      </div>
                                  </div>`
            }

        function formOutcomingMessage(content, time, date, senderId) {
              return `<div class="outgoing_msg">
                        <div class="sent_msg">
                            <p>
                                ${content}
                            </p>
                            <span class="time_date">${time + '|' + date}</span>
                        </div>
                    </div>`
            }
    </script>
}